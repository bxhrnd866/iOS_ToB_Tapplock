//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `Century Gothic.ttf`.
    static let centuryGothicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Century Gothic", pathExtension: "ttf")
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    /// Resource file `Root_logo.png`.
    static let root_logoPng = Rswift.FileResource(bundle: R.hostingBundle, name: "Root_logo", pathExtension: "png")
    /// Resource file `api_tapplock_com.cer`.
    static let api_tapplock_comCer = Rswift.FileResource(bundle: R.hostingBundle, name: "api_tapplock_com", pathExtension: "cer")
    /// Resource file `html`.
    static let html = Rswift.FileResource(bundle: R.hostingBundle, name: "html", pathExtension: "")
    
    /// `bundle.url(forResource: "Century Gothic", withExtension: "ttf")`
    static func centuryGothicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.centuryGothicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Root_logo", withExtension: "png")`
    static func root_logoPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.root_logoPng
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "api_tapplock_com", withExtension: "cer")`
    static func api_tapplock_comCer(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.api_tapplock_comCer
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "html", withExtension: "")`
    static func html(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.html
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `CenturyGothic`.
    static let centuryGothic = Rswift.FontResource(fontName: "CenturyGothic")
    
    /// `UIFont(name: "CenturyGothic", size: ...)`
    static func centuryGothic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: centuryGothic, size: size)
    }
    
    static func validate() throws {
      if R.font.centuryGothic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'CenturyGothic' could not be loaded, is 'Century Gothic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 89 images.
  struct image {
    /// Image `Back_Arrow`.
    static let back_Arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Back_Arrow")
    /// Image `CenterIcon`.
    static let centerIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CenterIcon")
    /// Image `DFU-Hierarchical`.
    static let dfuHierarchical = Rswift.ImageResource(bundle: R.hostingBundle, name: "DFU-Hierarchical")
    /// Image `History_calender`.
    static let history_calender = Rswift.ImageResource(bundle: R.hostingBundle, name: "History_calender")
    /// Image `History_closethelock`.
    static let history_closethelock = Rswift.ImageResource(bundle: R.hostingBundle, name: "History_closethelock")
    /// Image `History_openedthelock`.
    static let history_openedthelock = Rswift.ImageResource(bundle: R.hostingBundle, name: "History_openedthelock")
    /// Image `Historylocation`.
    static let historylocation = Rswift.ImageResource(bundle: R.hostingBundle, name: "Historylocation")
    /// Image `Home_Hierarchical`.
    static let home_Hierarchical = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home_Hierarchical")
    /// Image `Home_lock1_n`.
    static let home_lock1_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home_lock1_n")
    /// Image `Home_lock1_s`.
    static let home_lock1_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home_lock1_s")
    /// Image `Home_lock2_n`.
    static let home_lock2_n = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home_lock2_n")
    /// Image `Home_lock2_s`.
    static let home_lock2_s = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home_lock2_s")
    /// Image `Home_right`.
    static let home_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home_right")
    /// Image `Home_search`.
    static let home_search = Rswift.ImageResource(bundle: R.hostingBundle, name: "Home_search")
    /// Image `Homebackground`.
    static let homebackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "Homebackground")
    /// Image `Homelogo`.
    static let homelogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Homelogo")
    /// Image `Lock_lockicon`.
    static let lock_lockicon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Lock_lockicon")
    /// Image `Log_email`.
    static let log_email = Rswift.ImageResource(bundle: R.hostingBundle, name: "Log_email")
    /// Image `Log_password`.
    static let log_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "Log_password")
    /// Image `Login_BGR`.
    static let login_BGR = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login_BGR")
    /// Image `Login_Logo`.
    static let login_Logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Login_Logo")
    /// Image `Naivsearch`.
    static let naivsearch = Rswift.ImageResource(bundle: R.hostingBundle, name: "Naivsearch")
    /// Image `Placeholder_Userhead`.
    static let placeholder_Userhead = Rswift.ImageResource(bundle: R.hostingBundle, name: "Placeholder_Userhead")
    /// Image `Root_logo`.
    static let root_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Root_logo")
    /// Image `Sexgroup`.
    static let sexgroup = Rswift.ImageResource(bundle: R.hostingBundle, name: "Sexgroup")
    /// Image `Takepic`.
    static let takepic = Rswift.ImageResource(bundle: R.hostingBundle, name: "Takepic")
    /// Image `Tutorial - 01`.
    static let tutorial01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tutorial - 01")
    /// Image `Tutorial - 02`.
    static let tutorial02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tutorial - 02")
    /// Image `Tutorial - 03`.
    static let tutorial03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tutorial - 03")
    /// Image `Tutorial - 04`.
    static let tutorial04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tutorial - 04")
    /// Image `UserPlace`.
    static let userPlace = Rswift.ImageResource(bundle: R.hostingBundle, name: "UserPlace")
    /// Image `bluetooth`.
    static let bluetooth = Rswift.ImageResource(bundle: R.hostingBundle, name: "bluetooth")
    /// Image `bottomArrow`.
    static let bottomArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottomArrow")
    /// Image `fingerprint`.
    static let fingerprint = Rswift.ImageResource(bundle: R.hostingBundle, name: "fingerprint")
    /// Image `gif_0`.
    static let gif_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_0")
    /// Image `gif_10`.
    static let gif_10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_10")
    /// Image `gif_11`.
    static let gif_11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_11")
    /// Image `gif_12`.
    static let gif_12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_12")
    /// Image `gif_13`.
    static let gif_13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_13")
    /// Image `gif_14`.
    static let gif_14 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_14")
    /// Image `gif_15`.
    static let gif_15 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_15")
    /// Image `gif_16`.
    static let gif_16 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_16")
    /// Image `gif_17`.
    static let gif_17 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_17")
    /// Image `gif_18`.
    static let gif_18 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_18")
    /// Image `gif_19`.
    static let gif_19 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_19")
    /// Image `gif_1`.
    static let gif_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_1")
    /// Image `gif_20`.
    static let gif_20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_20")
    /// Image `gif_21`.
    static let gif_21 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_21")
    /// Image `gif_22`.
    static let gif_22 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_22")
    /// Image `gif_23`.
    static let gif_23 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_23")
    /// Image `gif_24`.
    static let gif_24 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_24")
    /// Image `gif_25`.
    static let gif_25 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_25")
    /// Image `gif_26`.
    static let gif_26 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_26")
    /// Image `gif_27`.
    static let gif_27 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_27")
    /// Image `gif_28`.
    static let gif_28 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_28")
    /// Image `gif_29`.
    static let gif_29 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_29")
    /// Image `gif_2`.
    static let gif_2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_2")
    /// Image `gif_30`.
    static let gif_30 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_30")
    /// Image `gif_31`.
    static let gif_31 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_31")
    /// Image `gif_32`.
    static let gif_32 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_32")
    /// Image `gif_33`.
    static let gif_33 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_33")
    /// Image `gif_34`.
    static let gif_34 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_34")
    /// Image `gif_35`.
    static let gif_35 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_35")
    /// Image `gif_36`.
    static let gif_36 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_36")
    /// Image `gif_37`.
    static let gif_37 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_37")
    /// Image `gif_38`.
    static let gif_38 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_38")
    /// Image `gif_39`.
    static let gif_39 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_39")
    /// Image `gif_3`.
    static let gif_3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_3")
    /// Image `gif_40`.
    static let gif_40 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_40")
    /// Image `gif_4`.
    static let gif_4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_4")
    /// Image `gif_5`.
    static let gif_5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_5")
    /// Image `gif_6`.
    static let gif_6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_6")
    /// Image `gif_7`.
    static let gif_7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_7")
    /// Image `gif_8`.
    static let gif_8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_8")
    /// Image `gif_9`.
    static let gif_9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "gif_9")
    /// Image `icon_check`.
    static let icon_check = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_check")
    /// Image `lock_battery_0`.
    static let lock_battery_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_battery_0")
    /// Image `lock_battery_100`.
    static let lock_battery_100 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_battery_100")
    /// Image `lock_battery_20`.
    static let lock_battery_20 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_battery_20")
    /// Image `lock_battery_40`.
    static let lock_battery_40 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_battery_40")
    /// Image `lock_battery_60`.
    static let lock_battery_60 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_battery_60")
    /// Image `lock_battery_80`.
    static let lock_battery_80 = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_battery_80")
    /// Image `lock_bgImg`.
    static let lock_bgImg = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_bgImg")
    /// Image `lock_fingerPrintDelete`.
    static let lock_fingerPrintDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_fingerPrintDelete")
    /// Image `lock_fingerprint_high`.
    static let lock_fingerprint_high = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_fingerprint_high")
    /// Image `lock_sysn`.
    static let lock_sysn = Rswift.ImageResource(bundle: R.hostingBundle, name: "lock_sysn")
    /// Image `loudou`.
    static let loudou = Rswift.ImageResource(bundle: R.hostingBundle, name: "loudou")
    /// Image `placeholder_lock`.
    static let placeholder_lock = Rswift.ImageResource(bundle: R.hostingBundle, name: "placeholder_lock")
    /// Image `rightArrow`.
    static let rightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "rightArrow")
    
    /// `UIImage(named: "Back_Arrow", bundle: ..., traitCollection: ...)`
    static func back_Arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.back_Arrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CenterIcon", bundle: ..., traitCollection: ...)`
    static func centerIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.centerIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "DFU-Hierarchical", bundle: ..., traitCollection: ...)`
    static func dfuHierarchical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dfuHierarchical, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "History_calender", bundle: ..., traitCollection: ...)`
    static func history_calender(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history_calender, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "History_closethelock", bundle: ..., traitCollection: ...)`
    static func history_closethelock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history_closethelock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "History_openedthelock", bundle: ..., traitCollection: ...)`
    static func history_openedthelock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.history_openedthelock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Historylocation", bundle: ..., traitCollection: ...)`
    static func historylocation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.historylocation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Home_Hierarchical", bundle: ..., traitCollection: ...)`
    static func home_Hierarchical(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_Hierarchical, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Home_lock1_n", bundle: ..., traitCollection: ...)`
    static func home_lock1_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_lock1_n, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Home_lock1_s", bundle: ..., traitCollection: ...)`
    static func home_lock1_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_lock1_s, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Home_lock2_n", bundle: ..., traitCollection: ...)`
    static func home_lock2_n(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_lock2_n, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Home_lock2_s", bundle: ..., traitCollection: ...)`
    static func home_lock2_s(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_lock2_s, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Home_right", bundle: ..., traitCollection: ...)`
    static func home_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Home_search", bundle: ..., traitCollection: ...)`
    static func home_search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.home_search, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Homebackground", bundle: ..., traitCollection: ...)`
    static func homebackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homebackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Homelogo", bundle: ..., traitCollection: ...)`
    static func homelogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homelogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Lock_lockicon", bundle: ..., traitCollection: ...)`
    static func lock_lockicon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_lockicon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Log_email", bundle: ..., traitCollection: ...)`
    static func log_email(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.log_email, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Log_password", bundle: ..., traitCollection: ...)`
    static func log_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.log_password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Login_BGR", bundle: ..., traitCollection: ...)`
    static func login_BGR(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_BGR, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Login_Logo", bundle: ..., traitCollection: ...)`
    static func login_Logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.login_Logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Naivsearch", bundle: ..., traitCollection: ...)`
    static func naivsearch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.naivsearch, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Placeholder_Userhead", bundle: ..., traitCollection: ...)`
    static func placeholder_Userhead(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_Userhead, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Root_logo", bundle: ..., traitCollection: ...)`
    static func root_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.root_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Sexgroup", bundle: ..., traitCollection: ...)`
    static func sexgroup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sexgroup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Takepic", bundle: ..., traitCollection: ...)`
    static func takepic(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.takepic, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Tutorial - 01", bundle: ..., traitCollection: ...)`
    static func tutorial01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Tutorial - 02", bundle: ..., traitCollection: ...)`
    static func tutorial02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Tutorial - 03", bundle: ..., traitCollection: ...)`
    static func tutorial03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "Tutorial - 04", bundle: ..., traitCollection: ...)`
    static func tutorial04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tutorial04, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "UserPlace", bundle: ..., traitCollection: ...)`
    static func userPlace(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.userPlace, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bluetooth", bundle: ..., traitCollection: ...)`
    static func bluetooth(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bluetooth, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottomArrow", bundle: ..., traitCollection: ...)`
    static func bottomArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottomArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fingerprint", bundle: ..., traitCollection: ...)`
    static func fingerprint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fingerprint, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_0", bundle: ..., traitCollection: ...)`
    static func gif_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_1", bundle: ..., traitCollection: ...)`
    static func gif_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_10", bundle: ..., traitCollection: ...)`
    static func gif_10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_10, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_11", bundle: ..., traitCollection: ...)`
    static func gif_11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_11, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_12", bundle: ..., traitCollection: ...)`
    static func gif_12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_12, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_13", bundle: ..., traitCollection: ...)`
    static func gif_13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_13, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_14", bundle: ..., traitCollection: ...)`
    static func gif_14(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_14, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_15", bundle: ..., traitCollection: ...)`
    static func gif_15(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_15, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_16", bundle: ..., traitCollection: ...)`
    static func gif_16(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_16, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_17", bundle: ..., traitCollection: ...)`
    static func gif_17(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_17, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_18", bundle: ..., traitCollection: ...)`
    static func gif_18(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_18, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_19", bundle: ..., traitCollection: ...)`
    static func gif_19(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_19, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_2", bundle: ..., traitCollection: ...)`
    static func gif_2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_20", bundle: ..., traitCollection: ...)`
    static func gif_20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_20, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_21", bundle: ..., traitCollection: ...)`
    static func gif_21(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_21, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_22", bundle: ..., traitCollection: ...)`
    static func gif_22(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_22, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_23", bundle: ..., traitCollection: ...)`
    static func gif_23(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_23, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_24", bundle: ..., traitCollection: ...)`
    static func gif_24(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_24, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_25", bundle: ..., traitCollection: ...)`
    static func gif_25(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_25, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_26", bundle: ..., traitCollection: ...)`
    static func gif_26(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_26, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_27", bundle: ..., traitCollection: ...)`
    static func gif_27(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_27, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_28", bundle: ..., traitCollection: ...)`
    static func gif_28(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_28, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_29", bundle: ..., traitCollection: ...)`
    static func gif_29(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_29, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_3", bundle: ..., traitCollection: ...)`
    static func gif_3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_30", bundle: ..., traitCollection: ...)`
    static func gif_30(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_30, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_31", bundle: ..., traitCollection: ...)`
    static func gif_31(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_31, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_32", bundle: ..., traitCollection: ...)`
    static func gif_32(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_32, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_33", bundle: ..., traitCollection: ...)`
    static func gif_33(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_33, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_34", bundle: ..., traitCollection: ...)`
    static func gif_34(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_34, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_35", bundle: ..., traitCollection: ...)`
    static func gif_35(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_35, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_36", bundle: ..., traitCollection: ...)`
    static func gif_36(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_36, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_37", bundle: ..., traitCollection: ...)`
    static func gif_37(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_37, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_38", bundle: ..., traitCollection: ...)`
    static func gif_38(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_38, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_39", bundle: ..., traitCollection: ...)`
    static func gif_39(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_39, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_4", bundle: ..., traitCollection: ...)`
    static func gif_4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_40", bundle: ..., traitCollection: ...)`
    static func gif_40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_40, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_5", bundle: ..., traitCollection: ...)`
    static func gif_5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_6", bundle: ..., traitCollection: ...)`
    static func gif_6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_6, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_7", bundle: ..., traitCollection: ...)`
    static func gif_7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_7, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_8", bundle: ..., traitCollection: ...)`
    static func gif_8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_8, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "gif_9", bundle: ..., traitCollection: ...)`
    static func gif_9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.gif_9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_check", bundle: ..., traitCollection: ...)`
    static func icon_check(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_check, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock_battery_0", bundle: ..., traitCollection: ...)`
    static func lock_battery_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_battery_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock_battery_100", bundle: ..., traitCollection: ...)`
    static func lock_battery_100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_battery_100, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock_battery_20", bundle: ..., traitCollection: ...)`
    static func lock_battery_20(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_battery_20, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock_battery_40", bundle: ..., traitCollection: ...)`
    static func lock_battery_40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_battery_40, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock_battery_60", bundle: ..., traitCollection: ...)`
    static func lock_battery_60(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_battery_60, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock_battery_80", bundle: ..., traitCollection: ...)`
    static func lock_battery_80(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_battery_80, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock_bgImg", bundle: ..., traitCollection: ...)`
    static func lock_bgImg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_bgImg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock_fingerPrintDelete", bundle: ..., traitCollection: ...)`
    static func lock_fingerPrintDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_fingerPrintDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock_fingerprint_high", bundle: ..., traitCollection: ...)`
    static func lock_fingerprint_high(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_fingerprint_high, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "lock_sysn", bundle: ..., traitCollection: ...)`
    static func lock_sysn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.lock_sysn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "loudou", bundle: ..., traitCollection: ...)`
    static func loudou(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.loudou, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "placeholder_lock", bundle: ..., traitCollection: ...)`
    static func placeholder_lock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeholder_lock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "rightArrow", bundle: ..., traitCollection: ...)`
    static func rightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.rightArrow, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `MenuTableViewCell`.
    static let menuTableViewCell = _R.nib._MenuTableViewCell()
    
    /// `UINib(name: "MenuTableViewCell", in: bundle)`
    static func menuTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.menuTableViewCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 15 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AllGroupCellIdenty`.
    static let allGroupCellIdenty: Rswift.ReuseIdentifier<AllGroupCell> = Rswift.ReuseIdentifier(identifier: "AllGroupCellIdenty")
    /// Reuse identifier `BlueLockDetailIdentyCell`.
    static let blueLockDetailIdentyCell: Rswift.ReuseIdentifier<BlueLockDetailCell> = Rswift.ReuseIdentifier(identifier: "BlueLockDetailIdentyCell")
    /// Reuse identifier `BluetoothHistoryCell`.
    static let bluetoothHistoryCell: Rswift.ReuseIdentifier<BluetoothHistoryCell> = Rswift.ReuseIdentifier(identifier: "BluetoothHistoryCell")
    /// Reuse identifier `CellFingerHistory`.
    static let cellFingerHistory: Rswift.ReuseIdentifier<FingerLockDetailCell> = Rswift.ReuseIdentifier(identifier: "CellFingerHistory")
    /// Reuse identifier `FingerprintHistoryCell`.
    static let fingerprintHistoryCell: Rswift.ReuseIdentifier<FingerPrintListCell> = Rswift.ReuseIdentifier(identifier: "FingerprintHistoryCell")
    /// Reuse identifier `FingerprintListCollectCell`.
    static let fingerprintListCollectCell: Rswift.ReuseIdentifier<FingerPrintListCollectionCell> = Rswift.ReuseIdentifier(identifier: "FingerprintListCollectCell")
    /// Reuse identifier `GroupCollectCell`.
    static let groupCollectCell: Rswift.ReuseIdentifier<GroupCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "GroupCollectCell")
    /// Reuse identifier `PermissionCell`.
    static let permissionCell: Rswift.ReuseIdentifier<PermissionCollectionCell> = Rswift.ReuseIdentifier(identifier: "PermissionCell")
    /// Reuse identifier `PhotoAlbumCell`.
    static let photoAlbumCell: Rswift.ReuseIdentifier<ImagePickerTableViewCell> = Rswift.ReuseIdentifier(identifier: "PhotoAlbumCell")
    /// Reuse identifier `SelectPictureCameraCell`.
    static let selectPictureCameraCell: Rswift.ReuseIdentifier<CameraCell> = Rswift.ReuseIdentifier(identifier: "SelectPictureCameraCell")
    /// Reuse identifier `SelectPicturePhotoCell`.
    static let selectPicturePhotoCell: Rswift.ReuseIdentifier<SelectPicturePhotoCell> = Rswift.ReuseIdentifier(identifier: "SelectPicturePhotoCell")
    /// Reuse identifier `TapplockListCellIdenty`.
    static let tapplockListCellIdenty: Rswift.ReuseIdentifier<TappLockListCell> = Rswift.ReuseIdentifier(identifier: "TapplockListCellIdenty")
    /// Reuse identifier `allLocksListCellIdenty`.
    static let allLocksListCellIdenty: Rswift.ReuseIdentifier<AllLocksCell> = Rswift.ReuseIdentifier(identifier: "allLocksListCellIdenty")
    /// Reuse identifier `notificationCenterIdentifier`.
    static let notificationCenterIdentifier: Rswift.ReuseIdentifier<NotifactionCell> = Rswift.ReuseIdentifier(identifier: "notificationCenterIdentifier")
    /// Reuse identifier `userGroupCellIdenty`.
    static let userGroupCellIdenty: Rswift.ReuseIdentifier<UserGroupCell> = Rswift.ReuseIdentifier(identifier: "userGroupCellIdenty")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 18 view controllers.
  struct segue {
    /// This struct is generated for `AllLocksViewController`, and contains static references to 1 segues.
    struct allLocksViewController {
      /// Segue identifier `showAllGroupSegue`.
      static let showAllGroupSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AllLocksViewController, AllGroupController> = Rswift.StoryboardSegueIdentifier(identifier: "showAllGroupSegue")
      
      /// Optionally returns a typed version of segue `showAllGroupSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showAllGroupSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AllLocksViewController, AllGroupController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.allLocksViewController.showAllGroupSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `BlueHistoryController`, and contains static references to 1 segues.
    struct blueHistoryController {
      /// Segue identifier `showHistoryDate`.
      static let showHistoryDate: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, BlueHistoryController, HistoryDateController> = Rswift.StoryboardSegueIdentifier(identifier: "showHistoryDate")
      
      /// Optionally returns a typed version of segue `showHistoryDate`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHistoryDate(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, BlueHistoryController, HistoryDateController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.blueHistoryController.showHistoryDate, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `FingerHistoryController`, and contains static references to 1 segues.
    struct fingerHistoryController {
      /// Segue identifier `showHistoryDate`.
      static let showHistoryDate: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FingerHistoryController, HistoryDateController> = Rswift.StoryboardSegueIdentifier(identifier: "showHistoryDate")
      
      /// Optionally returns a typed version of segue `showHistoryDate`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHistoryDate(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FingerHistoryController, HistoryDateController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.fingerHistoryController.showHistoryDate, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `FingerLockDetailController`, and contains static references to 1 segues.
    struct fingerLockDetailController {
      /// Segue identifier `fingerHistorySegue`.
      static let fingerHistorySegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FingerLockDetailController, FingerHistoryController> = Rswift.StoryboardSegueIdentifier(identifier: "fingerHistorySegue")
      
      /// Optionally returns a typed version of segue `fingerHistorySegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fingerHistorySegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FingerLockDetailController, FingerHistoryController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.fingerLockDetailController.fingerHistorySegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `HomeViewController`, and contains static references to 7 segues.
    struct homeViewController {
      /// Segue identifier `pushMyTapplock`.
      static let pushMyTapplock: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, MyTapplockController> = Rswift.StoryboardSegueIdentifier(identifier: "pushMyTapplock")
      /// Segue identifier `pushProfile`.
      static let pushProfile: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, ProfileViewController> = Rswift.StoryboardSegueIdentifier(identifier: "pushProfile")
      /// Segue identifier `pushSetting`.
      static let pushSetting: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, UIKit.UITableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "pushSetting")
      /// Segue identifier `pushTutorial`.
      static let pushTutorial: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, TutorialController> = Rswift.StoryboardSegueIdentifier(identifier: "pushTutorial")
      /// Segue identifier `pushViewAlllock`.
      static let pushViewAlllock: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, AllLocksViewController> = Rswift.StoryboardSegueIdentifier(identifier: "pushViewAlllock")
      /// Segue identifier `pushViewHistory`.
      static let pushViewHistory: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, ViewHistoryController> = Rswift.StoryboardSegueIdentifier(identifier: "pushViewHistory")
      /// Segue identifier `showNotification`.
      static let showNotification: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, HomeViewController, NotificationController> = Rswift.StoryboardSegueIdentifier(identifier: "showNotification")
      
      /// Optionally returns a typed version of segue `pushMyTapplock`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func pushMyTapplock(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, MyTapplockController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.pushMyTapplock, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `pushProfile`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func pushProfile(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, ProfileViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.pushProfile, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `pushSetting`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func pushSetting(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, UIKit.UITableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.pushSetting, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `pushTutorial`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func pushTutorial(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, TutorialController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.pushTutorial, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `pushViewAlllock`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func pushViewAlllock(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, AllLocksViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.pushViewAlllock, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `pushViewHistory`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func pushViewHistory(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, ViewHistoryController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.pushViewHistory, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showNotification`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showNotification(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, HomeViewController, NotificationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.homeViewController.showNotification, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `InviteCodeController`, and contains static references to 1 segues.
    struct inviteCodeController {
      /// Segue identifier `showPassword`.
      static let showPassword: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, InviteCodeController, RegisterPasswordController> = Rswift.StoryboardSegueIdentifier(identifier: "showPassword")
      
      /// Optionally returns a typed version of segue `showPassword`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPassword(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, InviteCodeController, RegisterPasswordController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.inviteCodeController.showPassword, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LockDetailController`, and contains static references to 2 segues.
    struct lockDetailController {
      /// Segue identifier `lockBluetoothHistory`.
      static let lockBluetoothHistory: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LockDetailController, BlueHistoryController> = Rswift.StoryboardSegueIdentifier(identifier: "lockBluetoothHistory")
      /// Segue identifier `showUpdateDFU`.
      static let showUpdateDFU: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LockDetailController, UpdateDFUController> = Rswift.StoryboardSegueIdentifier(identifier: "showUpdateDFU")
      
      /// Optionally returns a typed version of segue `lockBluetoothHistory`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func lockBluetoothHistory(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LockDetailController, BlueHistoryController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.lockDetailController.lockBluetoothHistory, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showUpdateDFU`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showUpdateDFU(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LockDetailController, UpdateDFUController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.lockDetailController.showUpdateDFU, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `LoginViewController`, and contains static references to 1 segues.
    struct loginViewController {
      /// Segue identifier `RegisterSegue`.
      static let registerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, LoginViewController, RegistMailController> = Rswift.StoryboardSegueIdentifier(identifier: "RegisterSegue")
      
      /// Optionally returns a typed version of segue `RegisterSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func registerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, LoginViewController, RegistMailController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.loginViewController.registerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyTapplockController`, and contains static references to 3 segues.
    struct myTapplockController {
      /// Segue identifier `showBLELockDetail`.
      static let showBLELockDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyTapplockController, LockDetailController> = Rswift.StoryboardSegueIdentifier(identifier: "showBLELockDetail")
      /// Segue identifier `showFingerLockDetail`.
      static let showFingerLockDetail: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyTapplockController, FingerLockDetailController> = Rswift.StoryboardSegueIdentifier(identifier: "showFingerLockDetail")
      /// Segue identifier `showUserGroupSegue`.
      static let showUserGroupSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyTapplockController, UserGroupController> = Rswift.StoryboardSegueIdentifier(identifier: "showUserGroupSegue")
      
      /// Optionally returns a typed version of segue `showBLELockDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showBLELockDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyTapplockController, LockDetailController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myTapplockController.showBLELockDetail, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showFingerLockDetail`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showFingerLockDetail(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyTapplockController, FingerLockDetailController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myTapplockController.showFingerLockDetail, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showUserGroupSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showUserGroupSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyTapplockController, UserGroupController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myTapplockController.showUserGroupSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ProfileViewController`, and contains static references to 3 segues.
    struct profileViewController {
      /// Segue identifier `profileGroupIdentifier`.
      static let profileGroupIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProfileViewController, YourGroupController> = Rswift.StoryboardSegueIdentifier(identifier: "profileGroupIdentifier")
      /// Segue identifier `profilePermissionIdentifier`.
      static let profilePermissionIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProfileViewController, PermissionController> = Rswift.StoryboardSegueIdentifier(identifier: "profilePermissionIdentifier")
      /// Segue identifier `showImagepickerIdentifier`.
      static let showImagepickerIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProfileViewController, SelectPictureViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showImagepickerIdentifier")
      
      /// Optionally returns a typed version of segue `profileGroupIdentifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func profileGroupIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProfileViewController, YourGroupController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.profileViewController.profileGroupIdentifier, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `profilePermissionIdentifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func profilePermissionIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProfileViewController, PermissionController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.profileViewController.profilePermissionIdentifier, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showImagepickerIdentifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showImagepickerIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProfileViewController, SelectPictureViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.profileViewController.showImagepickerIdentifier, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RegistInformationController`, and contains static references to 2 segues.
    struct registInformationController {
      /// Segue identifier `showImagePickerIdentifier`.
      static let showImagePickerIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RegistInformationController, SelectPictureViewController> = Rswift.StoryboardSegueIdentifier(identifier: "showImagePickerIdentifier")
      /// Segue identifier `showSexSelect`.
      static let showSexSelect: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RegistInformationController, SexSelectController> = Rswift.StoryboardSegueIdentifier(identifier: "showSexSelect")
      
      /// Optionally returns a typed version of segue `showImagePickerIdentifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showImagePickerIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RegistInformationController, SelectPictureViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.registInformationController.showImagePickerIdentifier, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSexSelect`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSexSelect(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RegistInformationController, SexSelectController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.registInformationController.showSexSelect, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RegistMailController`, and contains static references to 1 segues.
    struct registMailController {
      /// Segue identifier `showVerificaitonCode`.
      static let showVerificaitonCode: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RegistMailController, RegistVerficationController> = Rswift.StoryboardSegueIdentifier(identifier: "showVerificaitonCode")
      
      /// Optionally returns a typed version of segue `showVerificaitonCode`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showVerificaitonCode(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RegistMailController, RegistVerficationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.registMailController.showVerificaitonCode, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RegistVerficationController`, and contains static references to 1 segues.
    struct registVerficationController {
      /// Segue identifier `showInviationCode`.
      static let showInviationCode: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RegistVerficationController, InviteCodeController> = Rswift.StoryboardSegueIdentifier(identifier: "showInviationCode")
      
      /// Optionally returns a typed version of segue `showInviationCode`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showInviationCode(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RegistVerficationController, InviteCodeController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.registVerficationController.showInviationCode, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RegisterPasswordController`, and contains static references to 1 segues.
    struct registerPasswordController {
      /// Segue identifier `showPersonalInformation`.
      static let showPersonalInformation: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RegisterPasswordController, RegistInformationController> = Rswift.StoryboardSegueIdentifier(identifier: "showPersonalInformation")
      
      /// Optionally returns a typed version of segue `showPersonalInformation`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showPersonalInformation(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RegisterPasswordController, RegistInformationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.registerPasswordController.showPersonalInformation, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RootViewController`, and contains static references to 3 segues.
    struct rootViewController {
      /// Segue identifier `ShowTutorialSegue`.
      static let showTutorialSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RootViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShowTutorialSegue")
      /// Segue identifier `showHomeSB`.
      static let showHomeSB: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RootViewController, BaseNaviController> = Rswift.StoryboardSegueIdentifier(identifier: "showHomeSB")
      /// Segue identifier `showLoginSb`.
      static let showLoginSb: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RootViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showLoginSb")
      
      /// Optionally returns a typed version of segue `ShowTutorialSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showTutorialSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RootViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.rootViewController.showTutorialSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showHomeSB`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showHomeSB(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RootViewController, BaseNaviController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.rootViewController.showHomeSB, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showLoginSb`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showLoginSb(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RootViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.rootViewController.showLoginSb, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SelectPictureViewController`, and contains static references to 1 segues.
    struct selectPictureViewController {
      /// Segue identifier `PhotoAlbumSegue`.
      static let photoAlbumSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SelectPictureViewController, PhotoAlbumViewController> = Rswift.StoryboardSegueIdentifier(identifier: "PhotoAlbumSegue")
      
      /// Optionally returns a typed version of segue `PhotoAlbumSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func photoAlbumSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SelectPictureViewController, PhotoAlbumViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.selectPictureViewController.photoAlbumSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UpdateDFUController`, and contains static references to 1 segues.
    struct updateDFUController {
      /// Segue identifier `showUpdateLoading`.
      static let showUpdateLoading: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UpdateDFUController, UpdateLoadingController> = Rswift.StoryboardSegueIdentifier(identifier: "showUpdateLoading")
      
      /// Optionally returns a typed version of segue `showUpdateLoading`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showUpdateLoading(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UpdateDFUController, UpdateLoadingController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.updateDFUController.showUpdateLoading, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ViewHistoryController`, and contains static references to 3 segues.
    struct viewHistoryController {
      /// Segue identifier `bleHistoryIdentifer`.
      static let bleHistoryIdentifer: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewHistoryController, BluetoothHistoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "bleHistoryIdentifer")
      /// Segue identifier `fingerPrintHistoryIdentifier`.
      static let fingerPrintHistoryIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewHistoryController, FingerprintHistoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "fingerPrintHistoryIdentifier")
      /// Segue identifier `showSearchViewIdentifier`.
      static let showSearchViewIdentifier: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ViewHistoryController, ViewHistorySearchController> = Rswift.StoryboardSegueIdentifier(identifier: "showSearchViewIdentifier")
      
      /// Optionally returns a typed version of segue `bleHistoryIdentifer`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func bleHistoryIdentifer(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewHistoryController, BluetoothHistoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewHistoryController.bleHistoryIdentifer, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `fingerPrintHistoryIdentifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func fingerPrintHistoryIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewHistoryController, FingerprintHistoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewHistoryController.fingerPrintHistoryIdentifier, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `showSearchViewIdentifier`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showSearchViewIdentifier(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ViewHistoryController, ViewHistorySearchController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.viewHistoryController.showSearchViewIdentifier, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 16 storyboards.
  struct storyboard {
    /// Storyboard `FingerLockDetail`.
    static let fingerLockDetail = _R.storyboard.fingerLockDetail()
    /// Storyboard `HistoryDatePicker`.
    static let historyDatePicker = _R.storyboard.historyDatePicker()
    /// Storyboard `Home`.
    static let home = _R.storyboard.home()
    /// Storyboard `ImagePicker`.
    static let imagePicker = _R.storyboard.imagePicker()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `LockDetail`.
    static let lockDetail = _R.storyboard.lockDetail()
    /// Storyboard `LogIn`.
    static let logIn = _R.storyboard.logIn()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MyTapplock`.
    static let myTapplock = _R.storyboard.myTapplock()
    /// Storyboard `NotificationCenter`.
    static let notificationCenter = _R.storyboard.notificationCenter()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Register`.
    static let register = _R.storyboard.register()
    /// Storyboard `Setting`.
    static let setting = _R.storyboard.setting()
    /// Storyboard `UpdateDFU`.
    static let updateDFU = _R.storyboard.updateDFU()
    /// Storyboard `ViewAlllock`.
    static let viewAlllock = _R.storyboard.viewAlllock()
    /// Storyboard `ViewHistory`.
    static let viewHistory = _R.storyboard.viewHistory()
    
    /// `UIStoryboard(name: "FingerLockDetail", bundle: ...)`
    static func fingerLockDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.fingerLockDetail)
    }
    
    /// `UIStoryboard(name: "HistoryDatePicker", bundle: ...)`
    static func historyDatePicker(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.historyDatePicker)
    }
    
    /// `UIStoryboard(name: "Home", bundle: ...)`
    static func home(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.home)
    }
    
    /// `UIStoryboard(name: "ImagePicker", bundle: ...)`
    static func imagePicker(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.imagePicker)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "LockDetail", bundle: ...)`
    static func lockDetail(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.lockDetail)
    }
    
    /// `UIStoryboard(name: "LogIn", bundle: ...)`
    static func logIn(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.logIn)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "MyTapplock", bundle: ...)`
    static func myTapplock(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.myTapplock)
    }
    
    /// `UIStoryboard(name: "NotificationCenter", bundle: ...)`
    static func notificationCenter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notificationCenter)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "Register", bundle: ...)`
    static func register(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.register)
    }
    
    /// `UIStoryboard(name: "Setting", bundle: ...)`
    static func setting(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.setting)
    }
    
    /// `UIStoryboard(name: "UpdateDFU", bundle: ...)`
    static func updateDFU(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.updateDFU)
    }
    
    /// `UIStoryboard(name: "ViewAlllock", bundle: ...)`
    static func viewAlllock(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.viewAlllock)
    }
    
    /// `UIStoryboard(name: "ViewHistory", bundle: ...)`
    static func viewHistory(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.viewHistory)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    /// This `R.string.infoPlist` struct is generated, and contains static references to 4 localization keys.
    struct infoPlist {
      /// ja translation: TapplockがBluetoothへのアクセスを求めています。 これによりタップロックに接続できます。
      /// 
      /// Locales: ja
      static let nsBluetoothPeripheralUsageDescription = Rswift.StringResource(key: "NSBluetoothPeripheralUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Tapplockのアプリがカメラへのアクセスを求めています。 これにより写真を撮る事ができます。
      /// 
      /// Locales: ja
      static let nsCameraUsageDescription = Rswift.StringResource(key: "NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Tapplockはあなたの写真へのアクセスを求めています。 これにより、カメラから写真を共有できます。
      /// 
      /// Locales: ja
      static let nsPhotoLibraryUsageDescription = Rswift.StringResource(key: "NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      /// ja translation: Tapplockは位置情報サービスへのアクセスを求めています。 これによりロック履歴にアクセスできるようになります。
      /// 
      /// Locales: ja
      static let nsLocationWhenInUseUsageDescription = Rswift.StringResource(key: "NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: ["ja"], comment: nil)
      
      /// ja translation: TapplockがBluetoothへのアクセスを求めています。 これによりタップロックに接続できます。
      /// 
      /// Locales: ja
      static func nsBluetoothPeripheralUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSBluetoothPeripheralUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: Tapplockのアプリがカメラへのアクセスを求めています。 これにより写真を撮る事ができます。
      /// 
      /// Locales: ja
      static func nsCameraUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSCameraUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: Tapplockはあなたの写真へのアクセスを求めています。 これにより、カメラから写真を共有できます。
      /// 
      /// Locales: ja
      static func nsPhotoLibraryUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSPhotoLibraryUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, comment: "")
      }
      
      /// ja translation: Tapplockは位置情報サービスへのアクセスを求めています。 これによりロック履歴にアクセスできるようになります。
      /// 
      /// Locales: ja
      static func nsLocationWhenInUseUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSLocationWhenInUseUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 187 localization keys.
    struct localizable {
      /// en translation: %@ opened the lock %@
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let lockLog = Rswift.StringResource(key: "LockLog", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: ADD A NEW TAPPLOCK Click here to add your lock.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let tutorial_TapplockAdd = Rswift.StringResource(key: "Tutorial_TapplockAdd", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: ADD FINGERPRINT Add your name here.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let tutorial_FingerprintName = Rswift.StringResource(key: "Tutorial_FingerprintName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: ADD FINGERPRINT Choose which finger.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let tutorial_FingerprintFinger = Rswift.StringResource(key: "Tutorial_FingerprintFinger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: ADD FINGERPRINT Choose which hand.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let tutorial_FingerprintHand = Rswift.StringResource(key: "Tutorial_FingerprintHand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: ADD FINGERPRINT OWNER Want to add more names?  Click here
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let tutorial_FingerprintAddOwner = Rswift.StringResource(key: "Tutorial_FingerprintAddOwner", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: ADD SHARE ACCESS Want to share your lock to a friend?
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let tutorial_AddShareAccess = Rswift.StringResource(key: "Tutorial_AddShareAccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Add A New Tapplock
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let adddNewLock = Rswift.StringResource(key: "AdddNewLock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Add Share Access
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let addNewShareAccess = Rswift.StringResource(key: "AddNewShareAccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Add shared user
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let addShareUser = Rswift.StringResource(key: "AddShareUser", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Added Fingerprint Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let successMessage_AddFingerprint = Rswift.StringResource(key: "SuccessMessage_AddFingerprint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Added New Tapplock Successfully  Please add a Fingerprint
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let successMessage_AddNewLock = Rswift.StringResource(key: "SuccessMessage_AddNewLock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Alert
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let alert = Rswift.StringResource(key: "Alert", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: All Group
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let allGroup = Rswift.StringResource(key: "AllGroup", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Are you sure you want to delete this Tapplock?
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let ensureMessage_DeleteLock = Rswift.StringResource(key: "EnsureMessage_DeleteLock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Are you sure you want to exit Tapplock?
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let ensureMessage_Logout = Rswift.StringResource(key: "EnsureMessage_Logout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: BLUETOOTH UNLOCKING Click here to open the lock while connected via Bluetooth.
      /// 
      /// Locales: en
      static let instructionUnlock = Rswift.StringResource(key: "InstructionUnlock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: BLUETOOTH UNLOCKING Click here to open the lock while connected via Bluetooth.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let tutorial_DetailUnlock = Rswift.StringResource(key: "Tutorial_DetailUnlock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Bluetooth Connected Failed
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_BluetoothConnectFailed = Rswift.StringResource(key: "ErrorMessage_BluetoothConnectFailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Bluetooth is turned off Please turn on the bluetooth
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_BluetoothOff = Rswift.StringResource(key: "ErrorMessage_BluetoothOff", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Can't input more than %d codes
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_MorseOverLenth = Rswift.StringResource(key: "ErrorMessage_MorseOverLenth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Click here to see the left hand fingerprint
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let instructionLeftFingerPrint = Rswift.StringResource(key: "InstructionLeftFingerPrint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Click here to see the right hand fingerprint
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let instructionRightFingerPrint = Rswift.StringResource(key: "InstructionRightFingerPrint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Confirm delete
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let confirmDelete = Rswift.StringResource(key: "Confirm delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Connected
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let connected = Rswift.StringResource(key: "Connected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Data Synchronization Completed
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let dataSyncCompeted = Rswift.StringResource(key: "DataSyncCompeted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Data Synchronizing Failed, Please Try Again
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_Synchronizing = Rswift.StringResource(key: "ErrorMessage_Synchronizing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Data does not exist or has been deleted
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400000 = Rswift.StringResource(key: "Code400000", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Delete Failed
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_Delete = Rswift.StringResource(key: "ErrorMessage_Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Deleted Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let successMessage_Delete = Rswift.StringResource(key: "SuccessMessage_Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Disconnected
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let disconnected = Rswift.StringResource(key: "Disconnected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Done
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Download failed, please download again
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let downloadfailed = Rswift.StringResource(key: "Downloadfailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Downloading Bluetooth firmware
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let downloadingBLE = Rswift.StringResource(key: "DownloadingBLE", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Edit
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let edit = Rswift.StringResource(key: "Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Edit Share Access
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let editShareAccess = Rswift.StringResource(key: "EditShareAccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Edit Share User
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let editShareUser = Rswift.StringResource(key: "EditShareUser", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Email already exists
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400001 = Rswift.StringResource(key: "Code400001", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Email not exists
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400010 = Rswift.StringResource(key: "Code400010", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: End Date
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let setEndTime = Rswift.StringResource(key: "SetEndTime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Enroll failed because of template existed
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_EnrollTemplateExisted = Rswift.StringResource(key: "ErrorMessage_EnrollTemplateExisted", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Failed to delete fingerprint
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_DeleteFingerprint = Rswift.StringResource(key: "ErrorMessage_DeleteFingerprint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Failed to enroll fingerprint, please try again.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_Enroll = Rswift.StringResource(key: "ErrorMessage_Enroll", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Feedback Sent Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let successMessage_Feedback = Rswift.StringResource(key: "SuccessMessage_Feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Fingerprint
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let fingerprint = Rswift.StringResource(key: "Fingerprint", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Firmware update
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let firmwareupdate = Rswift.StringResource(key: "Firmwareupdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Go to setting
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let goToSetting = Rswift.StringResource(key: "GoToSetting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Here is the menu
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let instructionsMenu = Rswift.StringResource(key: "InstructionsMenu", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: If the enrollment process is complete, the light will appear green.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_EnrollNoSpace = Rswift.StringResource(key: "ErrorMessage_EnrollNoSpace", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Incorrect email format
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_MailIncorrect = Rswift.StringResource(key: "ErrorMessage_MailIncorrect", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Incurrect Email or password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400006 = Rswift.StringResource(key: "Code400006", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Index
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let indexFinger = Rswift.StringResource(key: "IndexFinger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Initiate firmware updates
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmInitiatefirmwareupdates = Rswift.StringResource(key: "PMInitiatefirmwareupdates", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Installation failed, please install again
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let installationfailed = Rswift.StringResource(key: "Installationfailed", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Invalid Verification code
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let invalidVerificationcode = Rswift.StringResource(key: "InvalidVerificationcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Invalid invitation code
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let invalidinvitationcode = Rswift.StringResource(key: "Invalidinvitationcode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Invitation code is invalid
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400004 = Rswift.StringResource(key: "Code400004", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: It can't be all short codes Please set some long codes
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_MorseNoLongCode = Rswift.StringResource(key: "ErrorMessage_MorseNoLongCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: LOCK DETAILS Click here to find more about your lock.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let tutorial_TapplockLockCell = Rswift.StringResource(key: "Tutorial_TapplockLockCell", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: LOCK SETTING Set the profile pic and lock name here
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let tutorial_DetailSetting = Rswift.StringResource(key: "Tutorial_DetailSetting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Left
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let leftHand = Rswift.StringResource(key: "LeftHand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Little
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let littleFinger = Rswift.StringResource(key: "LittleFinger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Log out
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let menuLogout = Rswift.StringResource(key: "MenuLogout", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: MANAGE FINGERPRINTS Click here to manage fingerprints
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let tutorial_DetailFingerprints = Rswift.StringResource(key: "Tutorial_DetailFingerprints", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: MORSE CODE Click here to setup your custom Morse Code for your Tapplock.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let tutorial_MorseCode = Rswift.StringResource(key: "Tutorial_MorseCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Manage Access
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmManageAccess = Rswift.StringResource(key: "PMManageAccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Manage Admins
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmManageAdmins = Rswift.StringResource(key: "PMManageAdmins", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Manage All Access
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmManageAllAccess = Rswift.StringResource(key: "PMManageAllAccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Manage All Locks
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmManageAllLocks = Rswift.StringResource(key: "PMManageAllLocks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Manage All Users
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmManageAllUsers = Rswift.StringResource(key: "PMManageAllUsers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Manage Groups
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmManageGroups = Rswift.StringResource(key: "PMManageGroups", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Manage Lock
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmManageLock = Rswift.StringResource(key: "PMManageLock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Manage Morse-cod
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmManageMorsecod = Rswift.StringResource(key: "PMManageMorsecod", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Manage Operational Permission
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmManageOperationalPermission = Rswift.StringResource(key: "PMManageOperationalPermission", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Manage Users
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmManageUsers = Rswift.StringResource(key: "PMManageUsers", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Middle
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let middleFinger = Rswift.StringResource(key: "MiddleFinger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Morse Code Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let successMessage_MorseCode = Rswift.StringResource(key: "SuccessMessage_MorseCode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Morse Code Setup Failed
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_Morse = Rswift.StringResource(key: "ErrorMessage_Morse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: My Own
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let myOwn = Rswift.StringResource(key: "MyOwn", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: NO
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let no = Rswift.StringResource(key: "No", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: New Password Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let successMessage_Password = Rswift.StringResource(key: "SuccessMessage_Password", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: New Password should be more than %d characters
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_NewPasswordTooShort = Rswift.StringResource(key: "ErrorMessage_NewPasswordTooShort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: New firmware update. Please go to Lock Setting > Firmware Update to start
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let lockNewFirmwareVersionTotals = Rswift.StringResource(key: "LockNewFirmwareVersionTotals", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: New firmware version
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let newfirmwareversion = Rswift.StringResource(key: "Newfirmwareversion", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: New version of the app detected. Do you want to update?
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let canUpdateMessage = Rswift.StringResource(key: "CanUpdateMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Next
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let itmeNext = Rswift.StringResource(key: "ItmeNext", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Notification
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let menuNotification = Rswift.StringResource(key: "MenuNotification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: ONE TIME ACCESS Give the shared person a temporary 10 min access within the set time.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let tutorial_OneTimeAccess = Rswift.StringResource(key: "Tutorial_OneTimeAccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: PERMANENT Share the lock forever! (You can always revoke access)
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let tutorial_PermanentAccess = Rswift.StringResource(key: "Tutorial_PermanentAccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Password must be at least %d characters
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_PasswordTooShort = Rswift.StringResource(key: "ErrorMessage_PasswordTooShort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Passwords do not match
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_PasswordConfirmWrong = Rswift.StringResource(key: "ErrorMessage_PasswordConfirmWrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Permanent
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let permanent = Rswift.StringResource(key: "Permanent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please check your internet connection.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_NetOff = Rswift.StringResource(key: "ErrorMessage_NetOff", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please choose owner's name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_FingerOwnerEmpty = Rswift.StringResource(key: "ErrorMessage_FingerOwnerEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please choose the end time
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_ShareEndTimeEmpty = Rswift.StringResource(key: "ErrorMessage_ShareEndTimeEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please choose the finger
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_FingerEmpty = Rswift.StringResource(key: "ErrorMessage_FingerEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please choose the hand
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_FingerHandEmpty = Rswift.StringResource(key: "ErrorMessage_FingerHandEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please choose the share lock
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_ShareLockEmpty = Rswift.StringResource(key: "ErrorMessage_ShareLockEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please choose the start time
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_ShareStartTimeEmpty = Rswift.StringResource(key: "ErrorMessage_ShareStartTimeEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please choose whom to share to
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_ShareToEmpty = Rswift.StringResource(key: "ErrorMessage_ShareToEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please don't input Emoji
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_Emoji = Rswift.StringResource(key: "ErrorMessage_Emoji", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please don't input Username more than %d characters
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_UserNameOverLenth = Rswift.StringResource(key: "ErrorMessage_UserNameOverLenth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please don't input lock name more than %d characters
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_LockNameOverLenth = Rswift.StringResource(key: "ErrorMessage_LockNameOverLenth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please don't input more than %d characters for first name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_FirstNameOverLenth = Rswift.StringResource(key: "ErrorMessage_FirstNameOverLenth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please don't input more than %d characters for last name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_LastNameOverLenth = Rswift.StringResource(key: "ErrorMessage_LastNameOverLenth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please don't input more than %d characters for new password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_NewPasswordOverLenth = Rswift.StringResource(key: "ErrorMessage_NewPasswordOverLenth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please don't input more than %d characters for password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_PasswordOverLenth = Rswift.StringResource(key: "ErrorMessage_PasswordOverLenth", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please enter the confirmed password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_PasswordConfirmEmpty = Rswift.StringResource(key: "ErrorMessage_PasswordConfirmEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please enter the number
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let enterthenumber = Rswift.StringResource(key: "enterthenumber", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please fill in email
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_MailEmpty = Rswift.StringResource(key: "ErrorMessage_MailEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please fill in feedback title
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_FeedbackTitleEmpty = Rswift.StringResource(key: "ErrorMessage_FeedbackTitleEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please fill in first name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_FirstNameEmpty = Rswift.StringResource(key: "ErrorMessage_FirstNameEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please fill in last name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_LastNameEmpty = Rswift.StringResource(key: "ErrorMessage_LastNameEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please fill in password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_PasswordEmpty = Rswift.StringResource(key: "ErrorMessage_PasswordEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please fill in the Username
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_UsernameNameEmpty = Rswift.StringResource(key: "ErrorMessage_UsernameNameEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please fill in the new password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_NewPasswordEmpty = Rswift.StringResource(key: "ErrorMessage_NewPasswordEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please fill in the old password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_OldPasswordEmpty = Rswift.StringResource(key: "ErrorMessage_OldPasswordEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please fill in the verification code
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_vCodeEmpty = Rswift.StringResource(key: "ErrorMessage_vCodeEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please input Lock Name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_LockNameEmpty = Rswift.StringResource(key: "ErrorMessage_LockNameEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please input more than %d codes
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_MorseTooShort = Rswift.StringResource(key: "ErrorMessage_MorseTooShort", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please input the feedback description
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_FeedbackDescriptionEmpty = Rswift.StringResource(key: "ErrorMessage_FeedbackDescriptionEmpty", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please remove all locks before you delete the group
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400019 = Rswift.StringResource(key: "Code400019", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Please turn on the Location service
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let lockOpenLocationService = Rswift.StringResource(key: "LockOpenLocationService", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Profile
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let menuProfile = Rswift.StringResource(key: "MenuProfile", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Receive Bluetooth / connect notifications
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmReceivenotifications = Rswift.StringResource(key: "PMReceivenotifications", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Registered Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let successMessage_Register = Rswift.StringResource(key: "SuccessMessage_Register", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Resend
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let resend = Rswift.StringResource(key: "Resend", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Resend(%d)
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let resendCount = Rswift.StringResource(key: "ResendCount", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Right
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let rightHand = Rswift.StringResource(key: "RightHand", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Ring
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let ringFinger = Rswift.StringResource(key: "RingFinger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Roll Back
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let rollBack = Rswift.StringResource(key: "Roll Back", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Rolled Back Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let successMessage_RollingBack = Rswift.StringResource(key: "SuccessMessage_RollingBack", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let successMessage_Save = Rswift.StringResource(key: "SuccessMessage_Save", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Server error
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let servererror = Rswift.StringResource(key: "Servererror", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Setting
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let menuSetting = Rswift.StringResource(key: "MenuSetting", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Share Access Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let successMessage_ShareAccess = Rswift.StringResource(key: "SuccessMessage_ShareAccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Share User Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let successMessage_ShareUser = Rswift.StringResource(key: "SuccessMessage_ShareUser", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Shared Access
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let shared = Rswift.StringResource(key: "Shared", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Start Date
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let setStartTime = Rswift.StringResource(key: "SetStartTime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: TLBOX is using by company, you cannot delete it
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400015 = Rswift.StringResource(key: "Code400015", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Tapplock
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let menuTapplock = Rswift.StringResource(key: "MenuTapplock", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Tapplock Name Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let successMessage_LockName = Rswift.StringResource(key: "SuccessMessage_LockName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Tapplock is disconnected, Please turn your lock into the Bluetooth mode
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_LockDisconnected = Rswift.StringResource(key: "ErrorMessage_LockDisconnected", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: The MAC already exists
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400014 = Rswift.StringResource(key: "Code400014", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: The TLBOX is not belong the company
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400020 = Rswift.StringResource(key: "Code400020", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: The authorization has been revoded
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400022 = Rswift.StringResource(key: "Code400022", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: The data has been changed. Please try again
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400013 = Rswift.StringResource(key: "Code400013", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: The fingerprint already exists
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400016 = Rswift.StringResource(key: "Code400016", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: The group already exists
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400011 = Rswift.StringResource(key: "Code400011", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: The invitation code has been expired
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400023 = Rswift.StringResource(key: "Code400023", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: The lock name already exists
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400021 = Rswift.StringResource(key: "Code400021", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: The old password is incurrect
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400018 = Rswift.StringResource(key: "Code400018", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: The start time must not exceed the end time
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_ShareStartTimeEndTime = Rswift.StringResource(key: "ErrorMessage_ShareStartTimeEndTime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: The user has been approved
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400003 = Rswift.StringResource(key: "Code400003", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: The user is unprocessed or has been set to leave or freeze
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400005 = Rswift.StringResource(key: "Code400005", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: The verification code is incorrect
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400002 = Rswift.StringResource(key: "Code400002", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: There is a new update for the App. Please update to the latest version.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let mustUpdateMessage = Rswift.StringResource(key: "MustUpdateMessage", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: There is data that needs to be synchronized
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let dataNeedsToSync = Rswift.StringResource(key: "DataNeedsToSync", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: This is the access history page
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let instructionsHistorylist = Rswift.StringResource(key: "InstructionsHistorylist", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Thumb
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let thumbFinger = Rswift.StringResource(key: "ThumbFinger", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Turning off notifications may result in missing important notices
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let ensureMessage_Notification = Rswift.StringResource(key: "EnsureMessage_Notification", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Tutorial
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let menuTutorial = Rswift.StringResource(key: "MenuTutorial", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Update content
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let updatecontent = Rswift.StringResource(key: "Updatecontent", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Update now
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let updatenow = Rswift.StringResource(key: "Updatenow", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Updating, please do not turn off Bluetooth
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let updatingDontTurnOff = Rswift.StringResource(key: "UpdatingDontTurnOff", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: User doesn't have permission to log into the Enterprice system
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400008 = Rswift.StringResource(key: "Code400008", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: User status is abnormal
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400007 = Rswift.StringResource(key: "Code400007", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Username Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let successMessage_UserName = Rswift.StringResource(key: "SuccessMessage_UserName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Verification code mismatch
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_vCodeWrong = Rswift.StringResource(key: "ErrorMessage_vCodeWrong", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: View All Groups Info
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmViewAllGroupsInfo = Rswift.StringResource(key: "PMViewAllGroupsInfo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: View All Locks
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let menuViewAllLocks = Rswift.StringResource(key: "MenuViewAllLocks", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: View History
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let menuViewHistory = Rswift.StringResource(key: "MenuViewHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: View History
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmViewHistory = Rswift.StringResource(key: "PMViewHistory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: View all access history
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmAccesshistory = Rswift.StringResource(key: "PMAccesshistory", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: View all locks in assigned groups
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let pmAssignedgroups = Rswift.StringResource(key: "PMAssignedgroups", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: YES
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let yes = Rswift.StringResource(key: "Yes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: You cannot Delete until remove all users from the compnay
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400009 = Rswift.StringResource(key: "Code400009", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: You cannot delete the group until remove all users from group
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400012 = Rswift.StringResource(key: "Code400012", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: You don't have Manage Morse-code permission
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let code400017 = Rswift.StringResource(key: "Code400017", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: Your Tapplock has been upgraded to the latest version.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_NoFirmwareUpdate = Rswift.StringResource(key: "ErrorMessage_NoFirmwareUpdate", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: because of mismatch of fingerprint with confirmation
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let errorMessage_EnrollMismatch = Rswift.StringResource(key: "ErrorMessage_EnrollMismatch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: cancel
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: search lock name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let searchLockName = Rswift.StringResource(key: "searchLockName", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: set the time search criteria
      /// 
      /// Locales: en, ja, ko, cs, sk
      static let instructionDateSelct = Rswift.StringResource(key: "InstructionDateSelct", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "ja", "ko", "cs", "sk"], comment: nil)
      /// en translation: 用户权限变更
      /// 
      /// Locales: en
      static let userLogoutType111 = Rswift.StringResource(key: "UserLogoutType111", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: 用户退出被删除
      /// 
      /// Locales: en
      static let userLogoutType222 = Rswift.StringResource(key: "UserLogoutType222", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: %@ opened the lock %@
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func lockLog(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("LockLog", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// en translation: ADD A NEW TAPPLOCK Click here to add your lock.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func tutorial_TapplockAdd(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial_TapplockAdd", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ADD FINGERPRINT Add your name here.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func tutorial_FingerprintName(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial_FingerprintName", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ADD FINGERPRINT Choose which finger.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func tutorial_FingerprintFinger(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial_FingerprintFinger", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ADD FINGERPRINT Choose which hand.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func tutorial_FingerprintHand(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial_FingerprintHand", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ADD FINGERPRINT OWNER Want to add more names?  Click here
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func tutorial_FingerprintAddOwner(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial_FingerprintAddOwner", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ADD SHARE ACCESS Want to share your lock to a friend?
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func tutorial_AddShareAccess(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial_AddShareAccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add A New Tapplock
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func adddNewLock(_: Void = ()) -> String {
        return NSLocalizedString("AdddNewLock", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add Share Access
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func addNewShareAccess(_: Void = ()) -> String {
        return NSLocalizedString("AddNewShareAccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Add shared user
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func addShareUser(_: Void = ()) -> String {
        return NSLocalizedString("AddShareUser", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Added Fingerprint Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func successMessage_AddFingerprint(_: Void = ()) -> String {
        return NSLocalizedString("SuccessMessage_AddFingerprint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Added New Tapplock Successfully  Please add a Fingerprint
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func successMessage_AddNewLock(_: Void = ()) -> String {
        return NSLocalizedString("SuccessMessage_AddNewLock", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Alert
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func alert(_: Void = ()) -> String {
        return NSLocalizedString("Alert", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: All Group
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func allGroup(_: Void = ()) -> String {
        return NSLocalizedString("AllGroup", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure you want to delete this Tapplock?
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func ensureMessage_DeleteLock(_: Void = ()) -> String {
        return NSLocalizedString("EnsureMessage_DeleteLock", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Are you sure you want to exit Tapplock?
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func ensureMessage_Logout(_: Void = ()) -> String {
        return NSLocalizedString("EnsureMessage_Logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: BLUETOOTH UNLOCKING Click here to open the lock while connected via Bluetooth.
      /// 
      /// Locales: en
      static func instructionUnlock(_: Void = ()) -> String {
        return NSLocalizedString("InstructionUnlock", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: BLUETOOTH UNLOCKING Click here to open the lock while connected via Bluetooth.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func tutorial_DetailUnlock(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial_DetailUnlock", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bluetooth Connected Failed
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_BluetoothConnectFailed(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_BluetoothConnectFailed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Bluetooth is turned off Please turn on the bluetooth
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_BluetoothOff(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_BluetoothOff", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Can't input more than %d codes
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_MorseOverLenth(_ value1: Int) -> String {
        return String(format: NSLocalizedString("ErrorMessage_MorseOverLenth", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Click here to see the left hand fingerprint
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func instructionLeftFingerPrint(_: Void = ()) -> String {
        return NSLocalizedString("InstructionLeftFingerPrint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Click here to see the right hand fingerprint
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func instructionRightFingerPrint(_: Void = ()) -> String {
        return NSLocalizedString("InstructionRightFingerPrint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Confirm delete
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func confirmDelete(_: Void = ()) -> String {
        return NSLocalizedString("Confirm delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Connected
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func connected(_: Void = ()) -> String {
        return NSLocalizedString("Connected", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Data Synchronization Completed
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func dataSyncCompeted(_: Void = ()) -> String {
        return NSLocalizedString("DataSyncCompeted", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Data Synchronizing Failed, Please Try Again
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_Synchronizing(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_Synchronizing", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Data does not exist or has been deleted
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400000(_: Void = ()) -> String {
        return NSLocalizedString("Code400000", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Delete Failed
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_Delete(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_Delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Deleted Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func successMessage_Delete(_: Void = ()) -> String {
        return NSLocalizedString("SuccessMessage_Delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Disconnected
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func disconnected(_: Void = ()) -> String {
        return NSLocalizedString("Disconnected", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Done
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func done(_: Void = ()) -> String {
        return NSLocalizedString("Done", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Download failed, please download again
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func downloadfailed(_: Void = ()) -> String {
        return NSLocalizedString("Downloadfailed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Downloading Bluetooth firmware
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func downloadingBLE(_: Void = ()) -> String {
        return NSLocalizedString("DownloadingBLE", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func edit(_: Void = ()) -> String {
        return NSLocalizedString("Edit", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit Share Access
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func editShareAccess(_: Void = ()) -> String {
        return NSLocalizedString("EditShareAccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Edit Share User
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func editShareUser(_: Void = ()) -> String {
        return NSLocalizedString("EditShareUser", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email already exists
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400001(_: Void = ()) -> String {
        return NSLocalizedString("Code400001", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Email not exists
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400010(_: Void = ()) -> String {
        return NSLocalizedString("Code400010", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: End Date
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func setEndTime(_: Void = ()) -> String {
        return NSLocalizedString("SetEndTime", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Enroll failed because of template existed
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_EnrollTemplateExisted(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_EnrollTemplateExisted", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to delete fingerprint
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_DeleteFingerprint(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_DeleteFingerprint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Failed to enroll fingerprint, please try again.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_Enroll(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_Enroll", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Feedback Sent Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func successMessage_Feedback(_: Void = ()) -> String {
        return NSLocalizedString("SuccessMessage_Feedback", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Fingerprint
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func fingerprint(_: Void = ()) -> String {
        return NSLocalizedString("Fingerprint", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Firmware update
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func firmwareupdate(_: Void = ()) -> String {
        return NSLocalizedString("Firmwareupdate", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Go to setting
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func goToSetting(_: Void = ()) -> String {
        return NSLocalizedString("GoToSetting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Here is the menu
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func instructionsMenu(_: Void = ()) -> String {
        return NSLocalizedString("InstructionsMenu", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: If the enrollment process is complete, the light will appear green.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_EnrollNoSpace(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_EnrollNoSpace", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Incorrect email format
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_MailIncorrect(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_MailIncorrect", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Incurrect Email or password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400006(_: Void = ()) -> String {
        return NSLocalizedString("Code400006", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Index
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func indexFinger(_: Void = ()) -> String {
        return NSLocalizedString("IndexFinger", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Initiate firmware updates
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmInitiatefirmwareupdates(_: Void = ()) -> String {
        return NSLocalizedString("PMInitiatefirmwareupdates", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Installation failed, please install again
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func installationfailed(_: Void = ()) -> String {
        return NSLocalizedString("Installationfailed", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid Verification code
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func invalidVerificationcode(_: Void = ()) -> String {
        return NSLocalizedString("InvalidVerificationcode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invalid invitation code
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func invalidinvitationcode(_: Void = ()) -> String {
        return NSLocalizedString("Invalidinvitationcode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Invitation code is invalid
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400004(_: Void = ()) -> String {
        return NSLocalizedString("Code400004", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: It can't be all short codes Please set some long codes
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_MorseNoLongCode(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_MorseNoLongCode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: LOCK DETAILS Click here to find more about your lock.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func tutorial_TapplockLockCell(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial_TapplockLockCell", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: LOCK SETTING Set the profile pic and lock name here
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func tutorial_DetailSetting(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial_DetailSetting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Left
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func leftHand(_: Void = ()) -> String {
        return NSLocalizedString("LeftHand", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Little
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func littleFinger(_: Void = ()) -> String {
        return NSLocalizedString("LittleFinger", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Log out
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func menuLogout(_: Void = ()) -> String {
        return NSLocalizedString("MenuLogout", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MANAGE FINGERPRINTS Click here to manage fingerprints
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func tutorial_DetailFingerprints(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial_DetailFingerprints", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: MORSE CODE Click here to setup your custom Morse Code for your Tapplock.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func tutorial_MorseCode(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial_MorseCode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Manage Access
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmManageAccess(_: Void = ()) -> String {
        return NSLocalizedString("PMManageAccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Manage Admins
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmManageAdmins(_: Void = ()) -> String {
        return NSLocalizedString("PMManageAdmins", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Manage All Access
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmManageAllAccess(_: Void = ()) -> String {
        return NSLocalizedString("PMManageAllAccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Manage All Locks
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmManageAllLocks(_: Void = ()) -> String {
        return NSLocalizedString("PMManageAllLocks", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Manage All Users
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmManageAllUsers(_: Void = ()) -> String {
        return NSLocalizedString("PMManageAllUsers", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Manage Groups
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmManageGroups(_: Void = ()) -> String {
        return NSLocalizedString("PMManageGroups", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Manage Lock
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmManageLock(_: Void = ()) -> String {
        return NSLocalizedString("PMManageLock", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Manage Morse-cod
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmManageMorsecod(_: Void = ()) -> String {
        return NSLocalizedString("PMManageMorsecod", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Manage Operational Permission
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmManageOperationalPermission(_: Void = ()) -> String {
        return NSLocalizedString("PMManageOperationalPermission", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Manage Users
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmManageUsers(_: Void = ()) -> String {
        return NSLocalizedString("PMManageUsers", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Middle
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func middleFinger(_: Void = ()) -> String {
        return NSLocalizedString("MiddleFinger", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Morse Code Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func successMessage_MorseCode(_: Void = ()) -> String {
        return NSLocalizedString("SuccessMessage_MorseCode", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Morse Code Setup Failed
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_Morse(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_Morse", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: My Own
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func myOwn(_: Void = ()) -> String {
        return NSLocalizedString("MyOwn", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: NO
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func no(_: Void = ()) -> String {
        return NSLocalizedString("No", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New Password Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func successMessage_Password(_: Void = ()) -> String {
        return NSLocalizedString("SuccessMessage_Password", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New Password should be more than %d characters
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_NewPasswordTooShort(_ value1: Int) -> String {
        return String(format: NSLocalizedString("ErrorMessage_NewPasswordTooShort", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: New firmware update. Please go to Lock Setting > Firmware Update to start
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func lockNewFirmwareVersionTotals(_: Void = ()) -> String {
        return NSLocalizedString("LockNewFirmwareVersionTotals", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New firmware version
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func newfirmwareversion(_: Void = ()) -> String {
        return NSLocalizedString("Newfirmwareversion", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: New version of the app detected. Do you want to update?
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func canUpdateMessage(_: Void = ()) -> String {
        return NSLocalizedString("CanUpdateMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Next
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func itmeNext(_: Void = ()) -> String {
        return NSLocalizedString("ItmeNext", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Notification
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func menuNotification(_: Void = ()) -> String {
        return NSLocalizedString("MenuNotification", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func oK(_: Void = ()) -> String {
        return NSLocalizedString("OK", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: ONE TIME ACCESS Give the shared person a temporary 10 min access within the set time.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func tutorial_OneTimeAccess(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial_OneTimeAccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: PERMANENT Share the lock forever! (You can always revoke access)
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func tutorial_PermanentAccess(_: Void = ()) -> String {
        return NSLocalizedString("Tutorial_PermanentAccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Password must be at least %d characters
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_PasswordTooShort(_ value1: Int) -> String {
        return String(format: NSLocalizedString("ErrorMessage_PasswordTooShort", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Passwords do not match
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_PasswordConfirmWrong(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_PasswordConfirmWrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Permanent
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func permanent(_: Void = ()) -> String {
        return NSLocalizedString("Permanent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please check your internet connection.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_NetOff(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_NetOff", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please choose owner's name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_FingerOwnerEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_FingerOwnerEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please choose the end time
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_ShareEndTimeEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_ShareEndTimeEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please choose the finger
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_FingerEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_FingerEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please choose the hand
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_FingerHandEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_FingerHandEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please choose the share lock
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_ShareLockEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_ShareLockEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please choose the start time
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_ShareStartTimeEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_ShareStartTimeEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please choose whom to share to
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_ShareToEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_ShareToEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please don't input Emoji
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_Emoji(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_Emoji", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please don't input Username more than %d characters
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_UserNameOverLenth(_ value1: Int) -> String {
        return String(format: NSLocalizedString("ErrorMessage_UserNameOverLenth", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Please don't input lock name more than %d characters
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_LockNameOverLenth(_ value1: Int) -> String {
        return String(format: NSLocalizedString("ErrorMessage_LockNameOverLenth", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Please don't input more than %d characters for first name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_FirstNameOverLenth(_ value1: Int) -> String {
        return String(format: NSLocalizedString("ErrorMessage_FirstNameOverLenth", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Please don't input more than %d characters for last name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_LastNameOverLenth(_ value1: Int) -> String {
        return String(format: NSLocalizedString("ErrorMessage_LastNameOverLenth", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Please don't input more than %d characters for new password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_NewPasswordOverLenth(_ value1: Int) -> String {
        return String(format: NSLocalizedString("ErrorMessage_NewPasswordOverLenth", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Please don't input more than %d characters for password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_PasswordOverLenth(_ value1: Int) -> String {
        return String(format: NSLocalizedString("ErrorMessage_PasswordOverLenth", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Please enter the confirmed password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_PasswordConfirmEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_PasswordConfirmEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please enter the number
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func enterthenumber(_: Void = ()) -> String {
        return NSLocalizedString("enterthenumber", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please fill in email
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_MailEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_MailEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please fill in feedback title
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_FeedbackTitleEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_FeedbackTitleEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please fill in first name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_FirstNameEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_FirstNameEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please fill in last name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_LastNameEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_LastNameEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please fill in password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_PasswordEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_PasswordEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please fill in the Username
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_UsernameNameEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_UsernameNameEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please fill in the new password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_NewPasswordEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_NewPasswordEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please fill in the old password
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_OldPasswordEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_OldPasswordEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please fill in the verification code
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_vCodeEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_vCodeEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input Lock Name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_LockNameEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_LockNameEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please input more than %d codes
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_MorseTooShort(_ value1: Int) -> String {
        return String(format: NSLocalizedString("ErrorMessage_MorseTooShort", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Please input the feedback description
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_FeedbackDescriptionEmpty(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_FeedbackDescriptionEmpty", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please remove all locks before you delete the group
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400019(_: Void = ()) -> String {
        return NSLocalizedString("Code400019", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Please turn on the Location service
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func lockOpenLocationService(_: Void = ()) -> String {
        return NSLocalizedString("LockOpenLocationService", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Profile
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func menuProfile(_: Void = ()) -> String {
        return NSLocalizedString("MenuProfile", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Receive Bluetooth / connect notifications
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmReceivenotifications(_: Void = ()) -> String {
        return NSLocalizedString("PMReceivenotifications", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Registered Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func successMessage_Register(_: Void = ()) -> String {
        return NSLocalizedString("SuccessMessage_Register", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Resend
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func resend(_: Void = ()) -> String {
        return NSLocalizedString("Resend", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Resend(%d)
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func resendCount(_ value1: Int) -> String {
        return String(format: NSLocalizedString("ResendCount", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// en translation: Right
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func rightHand(_: Void = ()) -> String {
        return NSLocalizedString("RightHand", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ring
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func ringFinger(_: Void = ()) -> String {
        return NSLocalizedString("RingFinger", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Roll Back
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func rollBack(_: Void = ()) -> String {
        return NSLocalizedString("Roll Back", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Rolled Back Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func successMessage_RollingBack(_: Void = ()) -> String {
        return NSLocalizedString("SuccessMessage_RollingBack", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func successMessage_Save(_: Void = ()) -> String {
        return NSLocalizedString("SuccessMessage_Save", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Server error
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func servererror(_: Void = ()) -> String {
        return NSLocalizedString("Servererror", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Setting
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func menuSetting(_: Void = ()) -> String {
        return NSLocalizedString("MenuSetting", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share Access Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func successMessage_ShareAccess(_: Void = ()) -> String {
        return NSLocalizedString("SuccessMessage_ShareAccess", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Share User Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func successMessage_ShareUser(_: Void = ()) -> String {
        return NSLocalizedString("SuccessMessage_ShareUser", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Shared Access
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func shared(_: Void = ()) -> String {
        return NSLocalizedString("Shared", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Start Date
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func setStartTime(_: Void = ()) -> String {
        return NSLocalizedString("SetStartTime", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: TLBOX is using by company, you cannot delete it
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400015(_: Void = ()) -> String {
        return NSLocalizedString("Code400015", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tapplock
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func menuTapplock(_: Void = ()) -> String {
        return NSLocalizedString("MenuTapplock", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tapplock Name Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func successMessage_LockName(_: Void = ()) -> String {
        return NSLocalizedString("SuccessMessage_LockName", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tapplock is disconnected, Please turn your lock into the Bluetooth mode
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_LockDisconnected(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_LockDisconnected", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The MAC already exists
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400014(_: Void = ()) -> String {
        return NSLocalizedString("Code400014", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The TLBOX is not belong the company
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400020(_: Void = ()) -> String {
        return NSLocalizedString("Code400020", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The authorization has been revoded
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400022(_: Void = ()) -> String {
        return NSLocalizedString("Code400022", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The data has been changed. Please try again
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400013(_: Void = ()) -> String {
        return NSLocalizedString("Code400013", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The fingerprint already exists
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400016(_: Void = ()) -> String {
        return NSLocalizedString("Code400016", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The group already exists
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400011(_: Void = ()) -> String {
        return NSLocalizedString("Code400011", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The invitation code has been expired
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400023(_: Void = ()) -> String {
        return NSLocalizedString("Code400023", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The lock name already exists
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400021(_: Void = ()) -> String {
        return NSLocalizedString("Code400021", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The old password is incurrect
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400018(_: Void = ()) -> String {
        return NSLocalizedString("Code400018", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The start time must not exceed the end time
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_ShareStartTimeEndTime(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_ShareStartTimeEndTime", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The user has been approved
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400003(_: Void = ()) -> String {
        return NSLocalizedString("Code400003", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The user is unprocessed or has been set to leave or freeze
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400005(_: Void = ()) -> String {
        return NSLocalizedString("Code400005", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: The verification code is incorrect
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400002(_: Void = ()) -> String {
        return NSLocalizedString("Code400002", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: There is a new update for the App. Please update to the latest version.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func mustUpdateMessage(_: Void = ()) -> String {
        return NSLocalizedString("MustUpdateMessage", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: There is data that needs to be synchronized
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func dataNeedsToSync(_: Void = ()) -> String {
        return NSLocalizedString("DataNeedsToSync", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: This is the access history page
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func instructionsHistorylist(_: Void = ()) -> String {
        return NSLocalizedString("InstructionsHistorylist", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Thumb
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func thumbFinger(_: Void = ()) -> String {
        return NSLocalizedString("ThumbFinger", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Turning off notifications may result in missing important notices
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func ensureMessage_Notification(_: Void = ()) -> String {
        return NSLocalizedString("EnsureMessage_Notification", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Tutorial
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func menuTutorial(_: Void = ()) -> String {
        return NSLocalizedString("MenuTutorial", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Update content
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func updatecontent(_: Void = ()) -> String {
        return NSLocalizedString("Updatecontent", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Update now
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func updatenow(_: Void = ()) -> String {
        return NSLocalizedString("Updatenow", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Updating, please do not turn off Bluetooth
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func updatingDontTurnOff(_: Void = ()) -> String {
        return NSLocalizedString("UpdatingDontTurnOff", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: User doesn't have permission to log into the Enterprice system
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400008(_: Void = ()) -> String {
        return NSLocalizedString("Code400008", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: User status is abnormal
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400007(_: Void = ()) -> String {
        return NSLocalizedString("Code400007", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Username Saved Successfully
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func successMessage_UserName(_: Void = ()) -> String {
        return NSLocalizedString("SuccessMessage_UserName", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Verification code mismatch
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_vCodeWrong(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_vCodeWrong", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View All Groups Info
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmViewAllGroupsInfo(_: Void = ()) -> String {
        return NSLocalizedString("PMViewAllGroupsInfo", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View All Locks
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func menuViewAllLocks(_: Void = ()) -> String {
        return NSLocalizedString("MenuViewAllLocks", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View History
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func menuViewHistory(_: Void = ()) -> String {
        return NSLocalizedString("MenuViewHistory", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View History
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmViewHistory(_: Void = ()) -> String {
        return NSLocalizedString("PMViewHistory", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View all access history
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmAccesshistory(_: Void = ()) -> String {
        return NSLocalizedString("PMAccesshistory", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: View all locks in assigned groups
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func pmAssignedgroups(_: Void = ()) -> String {
        return NSLocalizedString("PMAssignedgroups", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: YES
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func yes(_: Void = ()) -> String {
        return NSLocalizedString("Yes", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You cannot Delete until remove all users from the compnay
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400009(_: Void = ()) -> String {
        return NSLocalizedString("Code400009", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You cannot delete the group until remove all users from group
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400012(_: Void = ()) -> String {
        return NSLocalizedString("Code400012", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: You don't have Manage Morse-code permission
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func code400017(_: Void = ()) -> String {
        return NSLocalizedString("Code400017", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Your Tapplock has been upgraded to the latest version.
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_NoFirmwareUpdate(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_NoFirmwareUpdate", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: because of mismatch of fingerprint with confirmation
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func errorMessage_EnrollMismatch(_: Void = ()) -> String {
        return NSLocalizedString("ErrorMessage_EnrollMismatch", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: cancel
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: search lock name
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func searchLockName(_: Void = ()) -> String {
        return NSLocalizedString("searchLockName", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: set the time search criteria
      /// 
      /// Locales: en, ja, ko, cs, sk
      static func instructionDateSelct(_: Void = ()) -> String {
        return NSLocalizedString("InstructionDateSelct", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 用户权限变更
      /// 
      /// Locales: en
      static func userLogoutType111(_: Void = ()) -> String {
        return NSLocalizedString("UserLogoutType111", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: 用户退出被删除
      /// 
      /// Locales: en
      static func userLogoutType222(_: Void = ()) -> String {
        return NSLocalizedString("UserLogoutType222", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 1 localization keys.
    struct main {
      /// sk translation: Tapplock © 2016 All Rights Reserved
      /// 
      /// Locales: sk, cs, ko
      static let cv1Jq1hzText = Rswift.StringResource(key: "cv1-Jq-1hz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["sk", "cs", "ko"], comment: nil)
      
      /// sk translation: Tapplock © 2016 All Rights Reserved
      /// 
      /// Locales: sk, cs, ko
      static func cv1Jq1hzText(_: Void = ()) -> String {
        return NSLocalizedString("cv1-Jq-1hz.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _MenuTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MenuTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MenuTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MenuTableViewCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try myTapplock.validate()
      try logIn.validate()
      try notificationCenter.validate()
      try updateDFU.validate()
      try setting.validate()
      try home.validate()
      try register.validate()
      try fingerLockDetail.validate()
      try lockDetail.validate()
      try viewHistory.validate()
      try viewAlllock.validate()
      try imagePicker.validate()
      try profile.validate()
    }
    
    struct fingerLockDetail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = FingerLockDetailController
      
      let bundle = R.hostingBundle
      let name = "FingerLockDetail"
      
      static func validate() throws {
        if UIKit.UIImage(named: "History_calender") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'History_calender' is used in storyboard 'FingerLockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "History_openedthelock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'History_openedthelock' is used in storyboard 'FingerLockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Lock_lockicon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Lock_lockicon' is used in storyboard 'FingerLockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lock_fingerprint_high") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lock_fingerprint_high' is used in storyboard 'FingerLockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LockDetail_fingerprint") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LockDetail_fingerprint' is used in storyboard 'FingerLockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lock_bgImg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lock_bgImg' is used in storyboard 'FingerLockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_lock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_lock' is used in storyboard 'FingerLockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lock_battery_0") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lock_battery_0' is used in storyboard 'FingerLockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back_Arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back_Arrow' is used in storyboard 'FingerLockDetail', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct historyDatePicker: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = HistoryDateController
      
      let bundle = R.hostingBundle
      let name = "HistoryDatePicker"
      
      fileprivate init() {}
    }
    
    struct home: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = BaseNaviController
      
      let bundle = R.hostingBundle
      let name = "Home"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Home_Hierarchical") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_Hierarchical' is used in storyboard 'Home', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct imagePicker: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SelectPictureViewController
      
      let bundle = R.hostingBundle
      let name = "ImagePicker"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Back_Arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back_Arrow' is used in storyboard 'ImagePicker', but couldn't be loaded.") }
        if UIKit.UIImage(named: "imageView:aMO-M5-YUt:image") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'imageView:aMO-M5-YUt:image' is used in storyboard 'ImagePicker', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct lockDetail: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LockDetailController
      
      let bundle = R.hostingBundle
      let name = "LockDetail"
      
      static func validate() throws {
        if UIKit.UIImage(named: "History_calender") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'History_calender' is used in storyboard 'LockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "History_openedthelock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'History_openedthelock' is used in storyboard 'LockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Lock_lockicon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Lock_lockicon' is used in storyboard 'LockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Historylocation") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Historylocation' is used in storyboard 'LockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LockDetail_fingerprint") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LockDetail_fingerprint' is used in storyboard 'LockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lock_bgImg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lock_bgImg' is used in storyboard 'LockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "lock_battery_0") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'lock_battery_0' is used in storyboard 'LockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back_Arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back_Arrow' is used in storyboard 'LockDetail', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LockDetail_unlock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LockDetail_unlock' is used in storyboard 'LockDetail', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct logIn: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "LogIn"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Log_email") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Log_email' is used in storyboard 'LogIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Log_password") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Log_password' is used in storyboard 'LogIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Login_BGR") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Login_BGR' is used in storyboard 'LogIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back_Arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back_Arrow' is used in storyboard 'LogIn', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Login_Logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Login_Logo' is used in storyboard 'LogIn', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RootViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      static func validate() throws {
        if UIKit.UIImage(named: "CenterIcon") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CenterIcon' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Tutorial - 02") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Tutorial - 02' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Homelogo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Homelogo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Tutorial - 01") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Tutorial - 01' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Homebackground") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Homebackground' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Login_Logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Login_Logo' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Tutorial - 04") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Tutorial - 04' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Tutorial - 03") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Tutorial - 03' is used in storyboard 'Main', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct myTapplock: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MyTapplockController
      
      let bundle = R.hostingBundle
      let name = "MyTapplock"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Home_search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_search' is used in storyboard 'MyTapplock', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back_Arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back_Arrow' is used in storyboard 'MyTapplock', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home_right") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_right' is used in storyboard 'MyTapplock', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home_Hierarchical") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_Hierarchical' is used in storyboard 'MyTapplock', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home_lock2_n") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_lock2_n' is used in storyboard 'MyTapplock', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct notificationCenter: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = NotificationController
      
      let bundle = R.hostingBundle
      let name = "NotificationCenter"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Home_Hierarchical") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_Hierarchical' is used in storyboard 'NotificationCenter', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ProfileViewController
      
      let bundle = R.hostingBundle
      let name = "Profile"
      
      static func validate() throws {
        if UIKit.UIImage(named: "UserPlace") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'UserPlace' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_check") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_check' is used in storyboard 'Profile', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home_Hierarchical") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_Hierarchical' is used in storyboard 'Profile', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct register: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = RegistMailController
      
      let bundle = R.hostingBundle
      let name = "Register"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Back_Arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back_Arrow' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Placeholder_Userhead") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Placeholder_Userhead' is used in storyboard 'Register', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Sexgroup") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Sexgroup' is used in storyboard 'Register', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct setting: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UITableViewController
      
      let bundle = R.hostingBundle
      let name = "Setting"
      
      static func validate() throws {
        if UIKit.UIImage(named: "About_Logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'About_Logo' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back_Arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back_Arrow' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home_right") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_right' is used in storyboard 'Setting', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home_Hierarchical") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_Hierarchical' is used in storyboard 'Setting', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct updateDFU: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UpdateDFUController
      
      let bundle = R.hostingBundle
      let name = "UpdateDFU"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Back_Arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back_Arrow' is used in storyboard 'UpdateDFU', but couldn't be loaded.") }
        if UIKit.UIImage(named: "DFU-Hierarchical") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'DFU-Hierarchical' is used in storyboard 'UpdateDFU', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct viewAlllock: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AllLocksViewController
      
      let bundle = R.hostingBundle
      let name = "ViewAlllock"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Home_search") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_search' is used in storyboard 'ViewAlllock', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Back_Arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Back_Arrow' is used in storyboard 'ViewAlllock', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home_right") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_right' is used in storyboard 'ViewAlllock', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home_Hierarchical") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_Hierarchical' is used in storyboard 'ViewAlllock', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home_lock2_n") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_lock2_n' is used in storyboard 'ViewAlllock', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct viewHistory: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewHistoryController
      
      let bundle = R.hostingBundle
      let name = "ViewHistory"
      
      static func validate() throws {
        if UIKit.UIImage(named: "rightArrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'rightArrow' is used in storyboard 'ViewHistory', but couldn't be loaded.") }
        if UIKit.UIImage(named: "History_openedthelock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'History_openedthelock' is used in storyboard 'ViewHistory', but couldn't be loaded.") }
        if UIKit.UIImage(named: "loudou") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'loudou' is used in storyboard 'ViewHistory', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Historylocation") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Historylocation' is used in storyboard 'ViewHistory', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Home_Hierarchical") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Home_Hierarchical' is used in storyboard 'ViewHistory', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Naivsearch") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Naivsearch' is used in storyboard 'ViewHistory', but couldn't be loaded.") }
        if UIKit.UIImage(named: "placeholder_lock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'placeholder_lock' is used in storyboard 'ViewHistory', but couldn't be loaded.") }
        if UIKit.UIImage(named: "UserPlace") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'UserPlace' is used in storyboard 'ViewHistory', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
